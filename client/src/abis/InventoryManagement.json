{
  "address": "0xdC16eE353d8369a716c5350b3b68Af48c97d0771",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "loyaltyRewardsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "transactionManagerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "retailer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "productCode",
          "type": "uint128"
        }
      ],
      "name": "ProductAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "retailer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "productName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "name": "ProductBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "retailer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "productCode",
          "type": "uint128"
        }
      ],
      "name": "ProductRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "retailer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "productCode",
          "type": "uint128"
        }
      ],
      "name": "ProductUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "productCode",
          "type": "uint128"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "tags",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "stock",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "score",
          "type": "uint32"
        }
      ],
      "name": "addProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "retailerAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "quantity",
          "type": "uint16"
        }
      ],
      "name": "buyProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "retailerAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        }
      ],
      "name": "getProduct",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "code",
              "type": "uint128"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tags",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "score",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "removed",
              "type": "bool"
            }
          ],
          "internalType": "struct Product",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "retailerAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "productCode",
          "type": "uint128"
        }
      ],
      "name": "getProductStock",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "retailerAddress",
          "type": "address"
        }
      ],
      "name": "getProducts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "code",
              "type": "uint128"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tags",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "score",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "removed",
              "type": "bool"
            }
          ],
          "internalType": "struct Product[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "name": "productStock",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "retailerAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        }
      ],
      "name": "removeProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "retailerProducts",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "code",
          "type": "uint128"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "score",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "removed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "tags",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "stock",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "score",
          "type": "uint32"
        }
      ],
      "name": "updateProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x351bdada2ced7b53345a3905db2f90b9e8db11d562ce9ae92dedbe9597cd0082",
  "receipt": {
    "to": null,
    "from": "0x72ac37F2B8685300a6B3781669a487eBb94a5CCd",
    "contractAddress": "0xdC16eE353d8369a716c5350b3b68Af48c97d0771",
    "transactionIndex": 0,
    "gasUsed": "2058797",
    "logsBloom": "0x
    "blockHash": "0x314fd3df0ad3d026f3a35f07efa88d6ef9070736ce4d131341897843954e1518",
    "transactionHash": "0x351bdada2ced7b53345a3905db2f90b9e8db11d562ce9ae92dedbe9597cd0082",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6681765,
        "transactionHash": "0x351bdada2ced7b53345a3905db2f90b9e8db11d562ce9ae92dedbe9597cd0082",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000072ac37f2b8685300a6b3781669a487ebb94a5ccd",
          "0x00000000000000000000000004ba3ef4c023c1006019a0f9baf6e70455e41fcf"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000080bb6223c0f00000000000000000000000000000000000000000000000000110d110cddd5c86400000000000000000000000000000000000000000000008177e988ffa18697f100000000000000000000000000000000000000000000000011050556bb99b96400000000000000000000000000000000000000000000008177f194b5c3c2a6f1",
        "logIndex": 0,
        "blockHash": "0x314fd3df0ad3d026f3a35f07efa88d6ef9070736ce4d131341897843954e1518"
      }
    ],
    "blockNumber": 6681765,
    "cumulativeGasUsed": "2058797",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC07b17696877180055bc2fD688265b65A3982092",
    "0x2bc91c73AC7d2c1D22F1be0c035BD59148ed328F",
    "0xc27cc7153E1788F3d3A91aF0518fcE01872C0810",
    "0xa6984A06a7B975b13dcC9c8F94e125eFD62c5052"
  ],
  "numDeployments": 1,
  "solcInputHash": "5869acd66d1fcfb8be90f59616081ff7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loyaltyRewardsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transactionManagerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"retailer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"productCode\",\"type\":\"uint128\"}],\"name\":\"ProductAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"retailer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"productName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"name\":\"ProductBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"retailer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"productCode\",\"type\":\"uint128\"}],\"name\":\"ProductRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"retailer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"productCode\",\"type\":\"uint128\"}],\"name\":\"ProductUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"productCode\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"stock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"score\",\"type\":\"uint32\"}],\"name\":\"addProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"retailerAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"}],\"name\":\"buyProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"retailerAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getProduct\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"code\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"score\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"struct Product\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"retailerAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"productCode\",\"type\":\"uint128\"}],\"name\":\"getProductStock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"retailerAddress\",\"type\":\"address\"}],\"name\":\"getProducts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"code\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"score\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"struct Product[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"productStock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"retailerAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"removeProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"retailerProducts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"code\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"score\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"stock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"score\",\"type\":\"uint32\"}],\"name\":\"updateProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract handles operations related to product management in a decentralized retail setup, including adding new products, updating existing ones, and processing purchases.\",\"kind\":\"dev\",\"methods\":{\"addProduct(uint128,string,string,string[],uint256,uint32,uint32)\":{\"details\":\"Adds a product to the retailer's inventory and initializes its stock. Emits the ProductAdded event.\",\"params\":{\"ipfsHash\":\"IPFS hash containing product information\",\"name\":\"Product name\",\"price\":\"Price of the product in smallest token units\",\"productCode\":\"Unique code for the product\",\"score\":\"Loyalty score awarded for purchasing this product\",\"stock\":\"Initial stock quantity\",\"tags\":\"Array of tags for categorization\"}},\"buyProduct(address,uint32,uint16)\":{\"details\":\"Processes the purchase of a product, handles payment transfer, updates stock, and registers the transaction. Emits the ProductBought event and interacts with LoyaltyRewards and TransactionManager.\",\"params\":{\"index\":\"Index of the product to buy\",\"quantity\":\"Quantity of the product to buy\",\"retailerAddress\":\"Address of the retailer\"}},\"getProduct(address,uint32)\":{\"params\":{\"index\":\"Index of the product\",\"retailerAddress\":\"Address of the retailer\"},\"returns\":{\"_0\":\"Single product details\"}},\"getProductStock(address,uint128)\":{\"params\":{\"productCode\":\"Code of the product\",\"retailerAddress\":\"Address of the retailer\"},\"returns\":{\"_0\":\"Stock quantity\"}},\"getProducts(address)\":{\"params\":{\"retailerAddress\":\"Address of the retailer\"},\"returns\":{\"_0\":\"Array of products\"}},\"removeProduct(address,uint32)\":{\"details\":\"Marks a product as removed in the retailer's inventory. Emits the ProductRemoved event.\",\"params\":{\"index\":\"Index of the product to remove\",\"retailerAddress\":\"Address of the retailer\"}},\"updateProduct(uint32,string,string[],uint256,uint32,uint32)\":{\"details\":\"Updates a product in the retailer's inventory and adjusts its stock. Emits the ProductUpdated event.\",\"params\":{\"index\":\"Index of the product in the retailer's product array\",\"name\":\"New name for the product\",\"price\":\"New price for the product\",\"score\":\"Updated loyalty score for the product\",\"stock\":\"Updated stock quantity\",\"tags\":\"New tags for the product\"}}},\"title\":\"Inventory Management for Retailer's Products\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addProduct(uint128,string,string,string[],uint256,uint32,uint32)\":{\"notice\":\"Adds a new product to the retailer's inventory\"},\"buyProduct(address,uint32,uint16)\":{\"notice\":\"Facilitates the purchase of a product from a retailer's inventory\"},\"getProduct(address,uint32)\":{\"notice\":\"Retrieves a specific product of a retailer\"},\"getProductStock(address,uint128)\":{\"notice\":\"Retrieves the stock of a specific product\"},\"getProducts(address)\":{\"notice\":\"Retrieves all products of a specific retailer\"},\"removeProduct(address,uint32)\":{\"notice\":\"Removes a product from the retailer's inventory\"},\"updateProduct(uint32,string,string[],uint256,uint32,uint32)\":{\"notice\":\"Updates existing product details\"}},\"notice\":\"Manages adding, updating, and buying products in a decentralized store environment\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InventoryManagement.sol\":\"InventoryManagement\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/InventoryManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./UserManager.sol\\\";\\nimport \\\"./LoyaltyRewards.sol\\\";\\nimport \\\"./TransactionManager.sol\\\";\\nimport \\\"./Tether.sol\\\";\\n\\n/**\\n * @title Product structure\\n * @notice Stores details about products available in the retailer's inventory\\n * @dev This struct is used for managing product information including pricing, stock, and loyalty scores.\\n */\\nstruct Product {\\n\\tuint128 code; // Unique product code\\n\\tstring ipfsHash; // IPFS hash for storing product images or metadata\\n\\tstring name; // Name of the product\\n\\tstring[] tags; // Tags for search and categorization\\n\\tuint256 price; // Price of the product in smallest token units\\n\\tuint32 score; // Loyalty score awarded for purchasing this product\\n\\tbool removed; // Flag indicating whether the product is removed from the inventory\\n}\\n\\n/**\\n * @title Inventory Management for Retailer's Products\\n * @notice Manages adding, updating, and buying products in a decentralized store environment\\n * @dev This contract handles operations related to product management in a decentralized retail setup,\\n * including adding new products, updating existing ones, and processing purchases.\\n */\\ncontract InventoryManagement {\\n\\tmapping(address => Product[]) public retailerProducts; // Mapping from retailer address to their list of products\\n\\tmapping(address => mapping(uint128 => uint32)) public productStock; // Mapping from retailer address and product code to stock count\\n\\n\\tUserManager userManager; // UserManager contract instance\\n\\tLoyaltyRewards loyaltyRewards; // LoyaltyRewards contract instance\\n\\tTransactionManager transactionManager; // TransactionManager contract instance\\n\\tIERC20 public paymentToken; // ERC20 token used for payment\\n\\n\\t// Events\\n\\tevent ProductAdded(address indexed retailer, uint128 productCode);\\n\\tevent ProductUpdated(address indexed retailer, uint128 productCode);\\n\\tevent ProductRemoved(address indexed retailer, uint128 productCode);\\n\\tevent ProductBought(\\n\\t\\taddress buyer,\\n\\t\\taddress retailer,\\n\\t\\tstring productName,\\n\\t\\tuint32 quantity\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress userManagerAddress,\\n\\t\\taddress paymentTokenAddress,\\n\\t\\taddress loyaltyRewardsAddress,\\n\\t\\taddress transactionManagerAddress\\n\\t) {\\n\\t\\tpaymentToken = IERC20(paymentTokenAddress);\\n\\t\\tuserManager = UserManager(userManagerAddress);\\n\\t\\tloyaltyRewards = LoyaltyRewards(loyaltyRewardsAddress);\\n\\t\\ttransactionManager = TransactionManager(transactionManagerAddress);\\n\\t}\\n\\n\\t// Modifiers\\n\\t/**\\n\\t * @notice Ensures that only verified retailers can perform certain actions\\n\\t * @dev Modifier to restrict certain functions to be callable only by verified retailers.\\n\\t */\\n\\tmodifier onlyRetailer() {\\n\\t\\trequire(\\n\\t\\t\\tuserManager.isRetailer(msg.sender),\\n\\t\\t\\t\\\"Only retailers can call this function\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t// Functions\\n\\t/**\\n\\t * @notice Adds a new product to the retailer's inventory\\n\\t * @dev Adds a product to the retailer's inventory and initializes its stock. Emits the ProductAdded event.\\n\\t * @param productCode Unique code for the product\\n\\t * @param ipfsHash IPFS hash containing product information\\n\\t * @param name Product name\\n\\t * @param tags Array of tags for categorization\\n\\t * @param price Price of the product in smallest token units\\n\\t * @param stock Initial stock quantity\\n\\t * @param score Loyalty score awarded for purchasing this product\\n\\t */\\n\\tfunction addProduct(\\n\\t\\tuint128 productCode,\\n\\t\\tstring memory ipfsHash,\\n\\t\\tstring memory name,\\n\\t\\tstring[] memory tags,\\n\\t\\tuint256 price,\\n\\t\\tuint32 stock,\\n\\t\\tuint32 score\\n\\t) public onlyRetailer {\\n\\t\\tretailerProducts[msg.sender].push(\\n\\t\\t\\tProduct({\\n\\t\\t\\t\\tcode: productCode,\\n\\t\\t\\t\\tipfsHash: ipfsHash,\\n\\t\\t\\t\\tname: name,\\n\\t\\t\\t\\ttags: tags,\\n\\t\\t\\t\\tprice: price,\\n\\t\\t\\t\\tscore: score,\\n\\t\\t\\t\\tremoved: false\\n\\t\\t\\t})\\n\\t\\t);\\n\\t\\tproductStock[msg.sender][productCode] = stock;\\n\\t\\temit ProductAdded(msg.sender, productCode);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates existing product details\\n\\t * @dev Updates a product in the retailer's inventory and adjusts its stock. Emits the ProductUpdated event.\\n\\t * @param index Index of the product in the retailer's product array\\n\\t * @param name New name for the product\\n\\t * @param tags New tags for the product\\n\\t * @param price New price for the product\\n\\t * @param stock Updated stock quantity\\n\\t * @param score Updated loyalty score for the product\\n\\t */\\n\\tfunction updateProduct(\\n\\t\\tuint32 index,\\n\\t\\tstring memory name,\\n\\t\\tstring[] memory tags,\\n\\t\\tuint256 price,\\n\\t\\tuint32 stock,\\n\\t\\tuint32 score\\n\\t) public onlyRetailer {\\n\\t\\trequire(\\n\\t\\t\\tindex < retailerProducts[msg.sender].length,\\n\\t\\t\\t\\\"Product index out of range\\\"\\n\\t\\t);\\n\\t\\tProduct storage product = retailerProducts[msg.sender][index];\\n\\t\\trequire(!product.removed, \\\"Product has been removed\\\");\\n\\n\\t\\tproduct.name = name;\\n\\t\\tproduct.tags = tags;\\n\\t\\tproduct.price = price;\\n\\t\\tproduct.score = score;\\n\\t\\tproductStock[msg.sender][product.code] = stock;\\n\\n\\t\\temit ProductUpdated(msg.sender, product.code);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Removes a product from the retailer's inventory\\n\\t * @dev Marks a product as removed in the retailer's inventory. Emits the ProductRemoved event.\\n\\t * @param retailerAddress Address of the retailer\\n\\t * @param index Index of the product to remove\\n\\t */\\n\\tfunction removeProduct(\\n\\t\\taddress retailerAddress,\\n\\t\\tuint32 index\\n\\t) public onlyRetailer {\\n\\t\\trequire(retailerAddress == msg.sender, \\\"Unauthorized access\\\");\\n\\t\\trequire(\\n\\t\\t\\tindex < retailerProducts[retailerAddress].length,\\n\\t\\t\\t\\\"Product index out of range\\\"\\n\\t\\t);\\n\\t\\tProduct storage product = retailerProducts[retailerAddress][index];\\n\\t\\trequire(!product.removed, \\\"Product already removed\\\");\\n\\n\\t\\tproduct.removed = true;\\n\\t\\temit ProductRemoved(retailerAddress, product.code);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Facilitates the purchase of a product from a retailer's inventory\\n\\t * @dev Processes the purchase of a product, handles payment transfer, updates stock, and registers the transaction.\\n\\t * Emits the ProductBought event and interacts with LoyaltyRewards and TransactionManager.\\n\\t * @param retailerAddress Address of the retailer\\n\\t * @param index Index of the product to buy\\n\\t * @param quantity Quantity of the product to buy\\n\\t */\\n\\tfunction buyProduct(\\n\\t\\taddress retailerAddress,\\n\\t\\tuint32 index,\\n\\t\\tuint16 quantity\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\tindex < retailerProducts[retailerAddress].length,\\n\\t\\t\\t\\\"Product index out of range\\\"\\n\\t\\t);\\n\\n\\t\\tProduct storage product = retailerProducts[retailerAddress][index];\\n\\n\\t\\trequire(product.code != 0, \\\"Product not found\\\");\\n\\t\\trequire(!product.removed, \\\"Product removed\\\");\\n\\n\\t\\tuint32 stock = productStock[retailerAddress][product.code];\\n\\t\\trequire(stock >= quantity, \\\"Not enough stock\\\");\\n\\n\\t\\tuint256 totalCost = product.price * quantity;\\n\\t\\tuint32 totalScore = product.score * quantity;\\n\\t\\tuint256 pollContribution = totalCost / 100;\\n\\n\\t\\trequire(\\n\\t\\t\\tpaymentToken.balanceOf(msg.sender) >= totalCost,\\n\\t\\t\\t\\\"Insufficient balance\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tpaymentToken.transferFrom(msg.sender, address(this), totalCost),\\n\\t\\t\\t\\\"Payment failed\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tpaymentToken.transfer(\\n\\t\\t\\t\\tretailerAddress,\\n\\t\\t\\t\\ttotalCost - pollContribution\\n\\t\\t\\t),\\n\\t\\t\\t\\\"Payment failed\\\"\\n\\t\\t);\\n\\n\\t\\tproductStock[retailerAddress][product.code] -= quantity;\\n\\t\\tloyaltyRewards.addScore(retailerAddress, msg.sender, totalScore);\\n\\n\\t\\tloyaltyRewards.createWalletIfNotExists(retailerAddress);\\n\\t\\tpaymentToken.approve(\\n\\t\\t\\tloyaltyRewards.getWalletAddress(retailerAddress),\\n\\t\\t\\tpollContribution\\n\\t\\t);\\n\\n\\t\\tloyaltyRewards.contributeToPool(\\n\\t\\t\\tretailerAddress,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tpollContribution\\n\\t\\t);\\n\\n\\t\\ttransactionManager.recordTransaction(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tretailerAddress,\\n\\t\\t\\tindex,\\n\\t\\t\\tquantity,\\n\\t\\t\\ttotalCost,\\n\\t\\t\\ttotalScore\\n\\t\\t);\\n\\n\\t\\temit ProductBought(msg.sender, retailerAddress, product.name, quantity);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves all products of a specific retailer\\n\\t * @param retailerAddress Address of the retailer\\n\\t * @return Array of products\\n\\t */\\n\\tfunction getProducts(\\n\\t\\taddress retailerAddress\\n\\t) public view returns (Product[] memory) {\\n\\t\\treturn retailerProducts[retailerAddress];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves a specific product of a retailer\\n\\t * @param retailerAddress Address of the retailer\\n\\t * @param index Index of the product\\n\\t * @return Single product details\\n\\t */\\n\\tfunction getProduct(\\n\\t\\taddress retailerAddress,\\n\\t\\tuint32 index\\n\\t) public view returns (Product memory) {\\n\\t\\trequire(\\n\\t\\t\\tindex < retailerProducts[retailerAddress].length,\\n\\t\\t\\t\\\"Product index out of range\\\"\\n\\t\\t);\\n\\t\\treturn retailerProducts[retailerAddress][index];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the stock of a specific product\\n\\t * @param retailerAddress Address of the retailer\\n\\t * @param productCode Code of the product\\n\\t * @return Stock quantity\\n\\t */\\n\\tfunction getProductStock(\\n\\t\\taddress retailerAddress,\\n\\t\\tuint128 productCode\\n\\t) public view returns (uint32) {\\n\\t\\treturn productStock[retailerAddress][productCode];\\n\\t}\\n}\\n\",\"keccak256\":\"0x7562742b37f72b378fd777e1c9f9dd3ca87f5720e9aeee5122b44b724f4b9f04\",\"license\":\"MIT\"},\"contracts/LoyaltyRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Tether.sol\\\";\\nimport \\\"./RetailerWallet.sol\\\";\\n\\n/**\\n * @title Loyalty Rewards System\\n * @notice Manages the allocation, redemption, and transfer of loyalty points within a retail ecosystem\\n * @dev This contract handles loyalty points accrual, redemption, and inter-user transfers, along with retailer-specific wallets management.\\n */\\ncontract LoyaltyRewards {\\n\\t// State variables\\n\\tmapping(address => mapping(address => uint32)) public scores; // Nested mapping of retailers to users to loyalty points\\n\\tmapping(address => uint64) public scorePool; // Total available loyalty points per retailer\\n\\tmapping(address => RetailerWallet) public retailerWallets; // Mapping of retailer addresses to their associated wallet contracts\\n\\n\\taddress private authorizedContract; // Address of the contract authorized to call restricted functions\\n\\tIERC20 public paymentToken; // ERC20 token used for transactions within the system\\n\\n\\t// Events\\n\\tevent RedeemScore(address indexed user, uint32 score, uint256 redeemTokens);\\n\\tevent ContributeToPool(address indexed retailer, uint256 amount);\\n\\tevent AddScore(address indexed user, uint32 score);\\n\\tevent TransferScore(address from, address to, uint32 score);\\n\\n\\t// Modifiers\\n\\t/**\\n\\t * @notice Ensures only the authorized contract can execute certain functions\\n\\t * @dev Restricts function calls to the address stored in `authorizedContract`.\\n\\t */\\n\\tmodifier onlyAuthorized() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == authorizedContract,\\n\\t\\t\\t\\\"Unauthorized: caller is not the authorized contract\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t// Constructor\\n\\t/**\\n\\t * @notice Initializes the LoyaltyRewards contract with a specific payment token.\\n\\t * @param _paymentTokenAddress Address of the ERC20 token used for payments and rewards.\\n\\t */\\n\\tconstructor(address _paymentTokenAddress) {\\n\\t\\tpaymentToken = IERC20(_paymentTokenAddress);\\n\\t\\tauthorizedContract = msg.sender; // Typically, this contract would be deployed by a factory or main contract managing the ecosystem.\\n\\t}\\n\\n\\t// Functions\\n\\t/**\\n\\t * @notice Sets a new authorized contract address.\\n\\t * @dev Updates the authorized contract address. Can only be called by the current authorized contract.\\n\\t * @param _authorizedContract New authorized contract address.\\n\\t */\\n\\tfunction setAuthorizedContract(\\n\\t\\taddress _authorizedContract\\n\\t) public onlyAuthorized {\\n\\t\\tauthorizedContract = _authorizedContract;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Adds loyalty score to a user under a specific retailer.\\n\\t * @dev Credits loyalty points to both the user's and retailer's total scores. Emits an AddScore event.\\n\\t * @param retailer Address of the retailer.\\n\\t * @param userAddress Address of the user receiving the points.\\n\\t * @param score Amount of loyalty score to add.\\n\\t */\\n\\tfunction addScore(\\n\\t\\taddress retailer,\\n\\t\\taddress userAddress,\\n\\t\\tuint32 score\\n\\t) public onlyAuthorized {\\n\\t\\tscores[retailer][userAddress] += score;\\n\\t\\tscorePool[retailer] += score;\\n\\t\\temit AddScore(userAddress, score);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Creates a wallet for the retailer if it does not already exist.\\n\\t * @dev Ensures a single wallet is associated with each retailer for managing redemption funds.\\n\\t * @param retailer Address of the retailer.\\n\\t */\\n\\tfunction createWalletIfNotExists(address retailer) public onlyAuthorized {\\n\\t\\tif (address(retailerWallets[retailer]) == address(0)) {\\n\\t\\t\\tretailerWallets[retailer] = new RetailerWallet(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\taddress(paymentToken)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Redeems loyalty score for tokens.\\n\\t * @dev Deducts loyalty points from the user's balance and transfers equivalent tokens from the retailer's wallet. Emits a RedeemScore event.\\n\\t * @param retailer Address of the retailer.\\n\\t * @param score Amount of loyalty score to redeem.\\n\\t */\\n\\tfunction redeemScore(address retailer, uint32 score) public {\\n\\t\\trequire(scores[retailer][msg.sender] >= score, \\\"Insufficient score\\\");\\n\\t\\tuint256 redeemTokens = calculateRedeemTokens(retailer, score);\\n\\t\\trequire(redeemTokens > 0, \\\"Redeem amount invalid\\\");\\n\\n\\t\\tRetailerWallet wallet = retailerWallets[retailer];\\n\\t\\trequire(wallet.balance() >= redeemTokens, \\\"Insufficient funds in pool\\\");\\n\\n\\t\\tscores[retailer][msg.sender] -= score;\\n\\t\\tscorePool[retailer] -= score;\\n\\t\\twallet.withdrawTokens(msg.sender, redeemTokens);\\n\\n\\t\\temit RedeemScore(msg.sender, score, redeemTokens);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfers loyalty score from one user to another under the same retailer.\\n\\t * @dev Allows users to transfer loyalty points to each other, ensuring sufficient balance before proceeding. Emits a TransferScore event.\\n\\t * @param retailer Address of the retailer where both users are registered.\\n\\t * @param to Address of the recipient receiving the score.\\n\\t * @param score Amount of loyalty score to transfer.\\n\\t */\\n\\tfunction transferScore(address retailer, address to, uint32 score) public {\\n\\t\\trequire(scores[retailer][msg.sender] >= score, \\\"Insufficient score\\\");\\n\\t\\tscores[retailer][msg.sender] -= score;\\n\\t\\tscores[retailer][to] += score;\\n\\t\\temit TransferScore(msg.sender, to, score);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates the amount of tokens that can be redeemed for a given score.\\n\\t * @dev Determines how many tokens a score is worth based on the current pool balance and total score.\\n\\t * @param retailer Address of the retailer.\\n\\t * @param score Amount of loyalty score to calculate tokens for.\\n\\t * @return redeemTokens The number of tokens that the score is worth.\\n\\t */\\n\\tfunction calculateRedeemTokens(\\n\\t\\taddress retailer,\\n\\t\\tuint32 score\\n\\t) public view returns (uint256) {\\n\\t\\tuint256 balance = retailerWallets[retailer].balance();\\n\\t\\tif (scorePool[retailer] == 0) return 0; // Prevents division by zero errors\\n\\t\\treturn (balance * score) / scorePool[retailer];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Contributes tokens to a retailer's loyalty pool.\\n\\t * @dev Adds funds to the retailer's wallet for future redemptions. Requires authorization. Emits ContributeToPool event.\\n\\t * @param retailer Address of the retailer.\\n\\t * @param vault Address from which tokens are transferred.\\n\\t * @param amount Amount of tokens to contribute.\\n\\t */\\n\\tfunction contributeToPool(\\n\\t\\taddress retailer,\\n\\t\\taddress vault,\\n\\t\\tuint256 amount\\n\\t) public onlyAuthorized {\\n\\t\\tRetailerWallet wallet = retailerWallets[retailer];\\n\\t\\trequire(\\n\\t\\t\\twallet != RetailerWallet(address(0)),\\n\\t\\t\\t\\\"Retailer wallet does not exist\\\"\\n\\t\\t);\\n\\t\\twallet.receiveTokens(vault, address(wallet), amount);\\n\\t\\temit ContributeToPool(retailer, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the loyalty score of a user under a specific retailer.\\n\\t * @param retailer Address of the retailer.\\n\\t * @param user Address of the user.\\n\\t * @return The loyalty score of the user.\\n\\t */\\n\\tfunction getScore(\\n\\t\\taddress retailer,\\n\\t\\taddress user\\n\\t) public view returns (uint32) {\\n\\t\\treturn scores[retailer][user];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the total loyalty score pool of a retailer.\\n\\t * @param retailer Address of the retailer.\\n\\t * @return The total score pool of the retailer.\\n\\t */\\n\\tfunction getScorePool(address retailer) public view returns (uint64) {\\n\\t\\treturn scorePool[retailer];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the total redeemable tokens available in a retailer's wallet.\\n\\t * @param retailer Address of the retailer.\\n\\t * @return The balance of redeemable tokens available.\\n\\t */\\n\\tfunction getRedeemPool(address retailer) public view returns (uint256) {\\n\\t\\treturn retailerWallets[retailer].balance();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Gets the wallet address associated with a retailer.\\n\\t * @param retailer Address of the retailer.\\n\\t * @return The address of the retailer's wallet.\\n\\t */\\n\\tfunction getWalletAddress(address retailer) public view returns (address) {\\n\\t\\trequire(\\n\\t\\t\\taddress(retailerWallets[retailer]) != address(0),\\n\\t\\t\\t\\\"No wallet for retailer\\\"\\n\\t\\t);\\n\\t\\treturn address(retailerWallets[retailer]);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf53f9a6f45885f968cf6b1af708a35aef268c8f102f438ccef3370f017cc69c2\",\"license\":\"MIT\"},\"contracts/RetailerWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Tether.sol\\\";\\n\\n/**\\n * @title RetailerWallet\\n * @dev Manages the wallet functionalities for a retailer, allowing them to\\n * withdraw and receive ERC20 tokens.\\n */\\ncontract RetailerWallet {\\n\\t// Public state variable to store the owner of the wallet. The owner is\\n\\t// the only entity that can perform certain actions like withdrawing tokens.\\n\\taddress public owner;\\n\\n\\t// Interface variable for interacting with ERC20 tokens.\\n\\tIERC20 public paymentToken;\\n\\n\\t/**\\n\\t * @dev Constructor that sets the owner and token address upon deployment.\\n\\t * @param _owner The address of the owner of this wallet.\\n\\t * @param _token The address of the ERC20 token that this wallet will manage.\\n\\t */\\n\\tconstructor(address _owner, address _token) {\\n\\t\\towner = _owner; // Set the owner of the wallet\\n\\t\\tpaymentToken = IERC20(_token); // Set the ERC20 token to be used by this wallet\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows the owner to withdraw tokens to a specified address.\\n\\t * @param to The address to which the tokens will be sent.\\n\\t * @param amount The amount of tokens to send.\\n\\t */\\n\\tfunction withdrawTokens(address to, uint256 amount) public {\\n\\t\\trequire(msg.sender == owner, \\\"Only owner can withdraw tokens\\\");\\n\\n\\t\\trequire(paymentToken.transfer(to, amount), \\\"Transfer failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Receives tokens from a specified address. This can be used to fund\\n\\t * the wallet.\\n\\t * @param from The address from which tokens will be pulled.\\n\\t * @param to The address to which the tokens will be sent (should be this wallet).\\n\\t * @param amount The amount of tokens to be transferred.\\n\\t */\\n\\tfunction receiveTokens(address from, address to, uint256 amount) public {\\n\\t\\trequire(paymentToken.transferFrom(from, to, amount), \\\"Transfer failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the balance of ERC20 tokens held by this wallet.\\n\\t * @return The balance of tokens.\\n\\t */\\n\\tfunction balance() public view returns (uint256) {\\n\\t\\treturn paymentToken.balanceOf(address(this));\\n\\t}\\n}\\n\",\"keccak256\":\"0xd564fa4d981ef867b170a713cdd288950eee2a1e9fe45a98ffaaee9ae34d408d\",\"license\":\"MIT\"},\"contracts/Tether.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IERC20\\n * @notice Interface for the ERC20 standard as defined in the EIP.\\n * @dev Defines the standard functions for ERC20 tokens, including balance, allowance, transfer functionalities, and associated events.\\n */\\ninterface IERC20 {\\n\\tfunction totalSupply() external view returns (uint256);\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\tfunction transfer(\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\tfunction allowance(\\n\\t\\taddress owner,\\n\\t\\taddress spender\\n\\t) external view returns (uint256);\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed spender,\\n\\t\\tuint256 value\\n\\t);\\n\\tevent Burn(address indexed burner, uint256 value);\\n}\\n\\n/**\\n * @title Tether\\n * @notice Simulates the Tether USD (USDT) token with ERC20 functionalities.\\n * @dev This contract implements the IERC20 interface and adds additional functionalities like token burning.\\n * It is initialized with a fixed supply of tokens credited to the owner's address.\\n */\\ncontract Tether is IERC20 {\\n\\tstring public name = \\\"Tether\\\";\\n\\tstring public symbol = \\\"USDT\\\";\\n\\tuint8 public decimals = 18;\\n\\tuint256 private _totalSupply = 1_000_000_000 * 10 ** uint256(decimals);\\n\\taddress private _owner;\\n\\tmapping(address => uint256) private _balances;\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\n\\t/**\\n\\t * @notice Constructs the Tether contract and assigns initial total supply to the owner.\\n\\t * @dev Sets the token name, symbol, decimals, and mints the total supply to the deployer.\\n\\t */\\n\\tconstructor() {\\n\\t\\t_owner = msg.sender;\\n\\t\\t_balances[_owner] = _totalSupply;\\n\\t\\temit Transfer(address(0), _owner, _totalSupply);\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == _owner, \\\"Only the owner can call this function\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction totalSupply() external view override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\tfunction balanceOf(\\n\\t\\taddress account\\n\\t) external view override returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\tfunction transfer(\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external override returns (bool) {\\n\\t\\trequire(recipient != address(0), \\\"Invalid recipient\\\");\\n\\t\\trequire(_balances[msg.sender] >= amount, \\\"Insufficient balance\\\");\\n\\n\\t\\t_balances[msg.sender] -= amount;\\n\\t\\t_balances[recipient] += amount;\\n\\t\\temit Transfer(msg.sender, recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction allowance(\\n\\t\\taddress owner,\\n\\t\\taddress spender\\n\\t) external view override returns (uint256) {\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\tfunction approve(\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) external override returns (bool) {\\n\\t\\t_allowances[msg.sender][spender] = amount;\\n\\t\\temit Approval(msg.sender, spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external override returns (bool) {\\n\\t\\trequire(sender != address(0), \\\"Invalid sender\\\");\\n\\t\\trequire(recipient != address(0), \\\"Invalid recipient\\\");\\n\\t\\trequire(_balances[sender] >= amount, \\\"Insufficient balance\\\");\\n\\t\\trequire(\\n\\t\\t\\t_allowances[sender][msg.sender] >= amount,\\n\\t\\t\\t\\\"Allowance exceeded\\\"\\n\\t\\t);\\n\\n\\t\\t_balances[sender] -= amount;\\n\\t\\t_balances[recipient] += amount;\\n\\t\\t_allowances[sender][msg.sender] -= amount;\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Burns a specific amount of tokens from the caller's account, reducing the total supply.\\n\\t * @dev Removes tokens from the circulating supply by reducing the caller's balance and the total supply count.\\n\\t * Emits a Burn event alongside a Transfer event to the zero address.\\n\\t * @param amount The amount of tokens to be burned.\\n\\t */\\n\\tfunction burn(uint256 amount) external {\\n\\t\\trequire(_balances[msg.sender] >= amount, \\\"Insufficient balance\\\");\\n\\t\\t_balances[msg.sender] -= amount;\\n\\t\\t_totalSupply -= amount;\\n\\t\\temit Transfer(msg.sender, address(0), amount);\\n\\t\\temit Burn(msg.sender, amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x7666ca1a82074dac836dcd19b12af7351b321dd4d583366f2672d10007d17444\",\"license\":\"MIT\"},\"contracts/TransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./InventoryManagement.sol\\\";\\nimport \\\"./UserManager.sol\\\";\\n\\n/**\\n * @title Transaction structure\\n * @notice Holds data for a single retail transaction.\\n * @dev This struct encapsulates all the details needed for recording transactions, including associated scores and costs.\\n */\\nstruct Transaction {\\n\\taddress buyer; // Address of the buyer\\n\\taddress retailer; // Address of the retailer\\n\\tuint32 productIndex; // Index of the purchased product in the inventory\\n\\tuint16 quantity; // Quantity of the product purchased\\n\\tuint256 totalPrice; // Total price paid\\n\\tuint32 totalScore; // Loyalty score earned from the transaction\\n\\tuint256 timestamp; // Timestamp when the transaction was recorded\\n}\\n\\n/**\\n * @title Transaction Manager\\n * @notice Manages recording and retrieving transactions in a retail environment\\n * @dev This contract allows for recording of retail transactions, linking products, buyers, and retailers with financial and loyalty data.\\n */\\ncontract TransactionManager {\\n\\tTransaction[] public transactions; // Dynamic array of all transactions\\n\\tmapping(address => uint[]) public userTransactions; // Mapping from user addresses to list of transaction indices\\n\\tmapping(address => uint[]) public retailerTransactions; // Mapping from retailer addresses to list of transaction indices\\n\\n\\tInventoryManagement public inventoryManagement; // Instance of InventoryManagement contract\\n\\tUserManager public userManager; // Instance of UserManager contract\\n\\n\\taddress public owner; // Owner of the contract\\n\\n\\t/**\\n\\t * @notice Initializes the contract with the address of the UserManager contract.\\n\\t * @dev Sets the owner to the message sender and initializes the UserManager contract.\\n\\t * @param userManagerAddress Address of the UserManager contract.\\n\\t */\\n\\tconstructor(address userManagerAddress) {\\n\\t\\towner = msg.sender;\\n\\t\\tuserManager = UserManager(userManagerAddress);\\n\\t}\\n\\n\\t// Modifiers\\n\\t/**\\n\\t * @notice Ensures the caller is the InventoryManagement contract.\\n\\t * @dev Modifier to restrict function access to only the InventoryManagement contract.\\n\\t */\\n\\tmodifier onlyInventoryManager() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == address(inventoryManagement),\\n\\t\\t\\t\\\"Only InventoryManager can call this function\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Ensures the caller is the owner of the contract.\\n\\t * @dev Modifier to restrict function access to only the owner of the contract.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == owner, \\\"Only owner can call this function\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// Functions\\n\\t/**\\n\\t * @notice Sets the InventoryManagement contract address.\\n\\t * @dev Can only be called by the contract owner.\\n\\t * @param inventoryManagementAddress Address of the InventoryManagement contract to be linked.\\n\\t */\\n\\tfunction setInventoryManagement(\\n\\t\\taddress inventoryManagementAddress\\n\\t) external onlyOwner {\\n\\t\\tinventoryManagement = InventoryManagement(inventoryManagementAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Records a transaction in the system.\\n\\t * @dev Stores transaction details and updates mappings for user and retailer transaction lists. Can only be called by InventoryManagement.\\n\\t * @param buyerAddress Address of the buyer.\\n\\t * @param retailerAddress Address of the retailer.\\n\\t * @param productIndex Index of the product being purchased.\\n\\t * @param quantity Quantity of the product being purchased.\\n\\t * @param totalCost Total cost of the transaction.\\n\\t * @param totalScore Total loyalty score associated with the transaction.\\n\\t */\\n\\tfunction recordTransaction(\\n\\t\\taddress buyerAddress,\\n\\t\\taddress retailerAddress,\\n\\t\\tuint32 productIndex,\\n\\t\\tuint16 quantity,\\n\\t\\tuint256 totalCost,\\n\\t\\tuint32 totalScore\\n\\t) external onlyInventoryManager {\\n\\t\\ttransactions.push(\\n\\t\\t\\tTransaction(\\n\\t\\t\\t\\tbuyerAddress,\\n\\t\\t\\t\\tretailerAddress,\\n\\t\\t\\t\\tproductIndex,\\n\\t\\t\\t\\tquantity,\\n\\t\\t\\t\\ttotalCost,\\n\\t\\t\\t\\ttotalScore,\\n\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tuint index = transactions.length - 1;\\n\\t\\tuserTransactions[buyerAddress].push(index);\\n\\t\\tretailerTransactions[retailerAddress].push(index);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves a transaction by its index.\\n\\t * @param index Index of the transaction in the array.\\n\\t * @return Transaction data structure containing all transaction details.\\n\\t */\\n\\tfunction getTransaction(\\n\\t\\tuint32 index\\n\\t) external view returns (Transaction memory) {\\n\\t\\treturn transactions[index];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves all transactions associated with a specific user.\\n\\t * @param userAddress Address of the user.\\n\\t * @return An array of transactions made by the user.\\n\\t */\\n\\tfunction getUserTransactions(\\n\\t\\taddress userAddress\\n\\t) external view returns (Transaction[] memory) {\\n\\t\\tuint[] memory indexes = userTransactions[userAddress];\\n\\t\\tTransaction[] memory result = new Transaction[](indexes.length);\\n\\t\\tfor (uint i = 0; i < indexes.length; i++) {\\n\\t\\t\\tresult[i] = transactions[indexes[i]];\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves all transactions associated with a specific retailer.\\n\\t * @param retailerAddress Address of the retailer.\\n\\t * @return An array of transactions involving the retailer.\\n\\t */\\n\\tfunction getRetailerTransactions(\\n\\t\\taddress retailerAddress\\n\\t) external view returns (Transaction[] memory) {\\n\\t\\tuint[] memory indexes = retailerTransactions[retailerAddress];\\n\\t\\tTransaction[] memory result = new Transaction[](indexes.length);\\n\\t\\tfor (uint i = 0; i < indexes.length; i++) {\\n\\t\\t\\tresult[i] = transactions[indexes[i]];\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n}\\n\",\"keccak256\":\"0x8092a026752280fe0a0c9180d5599b4ff6a800514f504e2108aab669fade3ee1\",\"license\":\"MIT\"},\"contracts/UserManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Tether.sol\\\";\\n\\n/**\\n * @title EntityType\\n * @notice Enumerates types of entities managed in the UserManager contract.\\n */\\nenum EntityType {\\n\\tUser,\\n\\tRetailer\\n}\\n\\n/**\\n * @title Entity\\n * @notice Represents an entity (either a user or a retailer) in the system.\\n * @dev Stores details like name, email, and IPFS hash for extended data.\\n */\\nstruct Entity {\\n\\tstring name;\\n\\tstring email;\\n\\tstring ipfsHash;\\n\\taddress wallet;\\n\\tEntityType entityType;\\n\\tstring walletId;\\n\\tstring additionalInfo;\\n}\\n\\n/**\\n * @title UserManager\\n * @notice Manages registration and updates of user and retailer entities.\\n * @dev This contract handles the creation, updating, and querying of user and retailer entities,\\n * leveraging mappings for efficient data retrieval.\\n */\\ncontract UserManager {\\n\\tmapping(address => Entity) public entities; // Mapping from wallet address to entity details\\n\\tmapping(string => address) public emailToWallet; // Mapping from email to wallet address for quick lookup\\n\\n\\taddress[] public entitiesList; // Dynamic array of entity addresses\\n\\n\\tIERC20 public paymentToken; // ERC20 token used for transactions within the system\\n\\n\\tevent EntityCreated(address indexed entityAddress, EntityType entityType);\\n\\tevent EntityUpdated(\\n\\t\\taddress indexed entityAddress,\\n\\t\\tstring indexed property,\\n\\t\\tstring newValue\\n\\t);\\n\\n\\tconstructor(address paymentTokenAddress) {\\n\\t\\tpaymentToken = IERC20(paymentTokenAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Ensures that the entity is not already registered.\\n\\t */\\n\\tmodifier isUniqueEntity() {\\n\\t\\trequire(\\n\\t\\t\\tentities[msg.sender].wallet == address(0),\\n\\t\\t\\t\\\"Entity already registered\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Ensures the email is not already in use by another entity.\\n\\t */\\n\\tmodifier isUniqueEmail(string memory email) {\\n\\t\\trequire(emailToWallet[email] == address(0), \\\"Email already exists\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Registers an entity with the provided details.\\n\\t * @dev Creates a new entity or updates an existing one, assigning it an initial balance of tokens.\\n\\t * @param name Name of the entity\\n\\t * @param email Email address of the entity\\n\\t * @param ipfsHash IPFS hash for extended data storage\\n\\t * @param entityType Type of the entity (User or Retailer)\\n\\t * @param walletId Unique identifier for the entity's wallet\\n\\t * @param additionalInfo Additional information relevant to the entity\\n\\t */\\n\\tfunction registerEntity(\\n\\t\\tstring memory name,\\n\\t\\tstring memory email,\\n\\t\\tstring memory ipfsHash,\\n\\t\\tEntityType entityType,\\n\\t\\tstring memory walletId,\\n\\t\\tstring memory additionalInfo\\n\\t) public isUniqueEntity isUniqueEmail(email) {\\n\\t\\tentities[msg.sender] = Entity(\\n\\t\\t\\tname,\\n\\t\\t\\temail,\\n\\t\\t\\tipfsHash,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tentityType,\\n\\t\\t\\twalletId,\\n\\t\\t\\tadditionalInfo\\n\\t\\t);\\n\\t\\tentitiesList.push(msg.sender);\\n\\t\\temailToWallet[email] = msg.sender;\\n\\n\\t\\tpaymentToken.transfer(msg.sender, 100 * 10 ** 18); // Initially allocating tokens\\n\\n\\t\\temit EntityCreated(msg.sender, entityType);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Simplified registration process for users.\\n\\t * @param name Name of the user\\n\\t * @param email Email address of the user\\n\\t * @param ipfsHash IPFS hash for user data\\n\\t * @param walletId Wallet identifier for the user\\n\\t */\\n\\tfunction createUser(\\n\\t\\tstring memory name,\\n\\t\\tstring memory email,\\n\\t\\tstring memory ipfsHash,\\n\\t\\tstring memory walletId\\n\\t) public {\\n\\t\\tregisterEntity(name, email, ipfsHash, EntityType.User, walletId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @notice Simplified registration process for retailers.\\n\\t * @param name Name of the retailer\\n\\t * @param email Email address of the retailer\\n\\t * @param ipfsHash IPFS hash for retailer data\\n\\t * @param walletId Wallet identifier for the retailer\\n\\t * @param additionalInfo Additional information for the retailer\\n\\t */\\n\\tfunction createRetailer(\\n\\t\\tstring memory name,\\n\\t\\tstring memory email,\\n\\t\\tstring memory ipfsHash,\\n\\t\\tstring memory walletId,\\n\\t\\tstring memory additionalInfo\\n\\t) public {\\n\\t\\tregisterEntity(\\n\\t\\t\\tname,\\n\\t\\t\\temail,\\n\\t\\t\\tipfsHash,\\n\\t\\t\\tEntityType.Retailer,\\n\\t\\t\\twalletId,\\n\\t\\t\\tadditionalInfo\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates an entity's specific property.\\n\\t * @dev Allows entities to update their information post-registration.\\n\\t * @param property The property to update (\\\"name\\\", \\\"email\\\", \\\"ipfsHash\\\", \\\"additionalInfo\\\")\\n\\t * @param newValue The new value for the specified property\\n\\t */\\n\\tfunction updateEntity(\\n\\t\\tstring memory property,\\n\\t\\tstring memory newValue\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\tentities[msg.sender].wallet != address(0),\\n\\t\\t\\t\\\"Entity not registered\\\"\\n\\t\\t);\\n\\n\\t\\tif (\\n\\t\\t\\tkeccak256(abi.encodePacked(property)) ==\\n\\t\\t\\tkeccak256(abi.encodePacked(\\\"name\\\"))\\n\\t\\t) {\\n\\t\\t\\tentities[msg.sender].name = newValue;\\n\\t\\t} else if (\\n\\t\\t\\tkeccak256(abi.encodePacked(property)) ==\\n\\t\\t\\tkeccak256(abi.encodePacked(\\\"email\\\"))\\n\\t\\t) {\\n\\t\\t\\tentities[msg.sender].email = newValue;\\n\\t\\t} else if (\\n\\t\\t\\tkeccak256(abi.encodePacked(property)) ==\\n\\t\\t\\tkeccak256(abi.encodePacked(\\\"ipfsHash\\\"))\\n\\t\\t) {\\n\\t\\t\\tentities[msg.sender].ipfsHash = newValue;\\n\\t\\t} else if (\\n\\t\\t\\tkeccak256(abi.encodePacked(property)) ==\\n\\t\\t\\tkeccak256(abi.encodePacked(\\\"additionalInfo\\\"))\\n\\t\\t) {\\n\\t\\t\\tentities[msg.sender].additionalInfo = newValue;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"Invalid property\\\");\\n\\t\\t}\\n\\n\\t\\temit EntityUpdated(msg.sender, property, newValue);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves detailed information about an entity.\\n\\t * @param walletAddress The wallet address of the entity.\\n\\t * @return Entity The complete entity structure with all details.\\n\\t */\\n\\tfunction getEntity(\\n\\t\\taddress walletAddress\\n\\t) public view returns (Entity memory) {\\n\\t\\treturn entities[walletAddress];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if an address belongs to a retailer.\\n\\t * @param walletAddress The wallet address to check.\\n\\t * @return bool True if the address belongs to a retailer.\\n\\t */\\n\\tfunction isRetailer(address walletAddress) public view returns (bool) {\\n\\t\\treturn entities[walletAddress].entityType == EntityType.Retailer;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if an address belongs to a user.\\n\\t * @param walletAddress The wallet address to check.\\n\\t * @return bool True if the address belongs to a user.\\n\\t */\\n\\tfunction isUser(address walletAddress) public view returns (bool) {\\n\\t\\treturn entities[walletAddress].entityType == EntityType.User;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves a list of all registered entity addresses.\\n\\t * @return address[] A list of all entity addresses.\\n\\t */\\n\\tfunction getEntitiesList() public view returns (address[] memory) {\\n\\t\\treturn entitiesList;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the wallet address associated with a given email.\\n\\t * @param email The email to search for.\\n\\t * @return address The wallet address associated with the email.\\n\\t */\\n\\tfunction getWalletByEmail(\\n\\t\\tstring memory email\\n\\t) public view returns (address) {\\n\\t\\treturn emailToWallet[email];\\n\\t}\\n}\\n\",\"keccak256\":\"0x6ead7c6b4d044c79bc48a189c886432712ca1923946eceb70c90ea08dc1a4c65\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620023a2380380620023a28339810160408190526200003491620000a2565b600580546001600160a01b03199081166001600160a01b03958616179091556002805482169585169590951790945560038054851692841692909217909155600480549093169116179055620000fe565b80516001600160a01b03811681146200009d57600080fd5b919050565b60008060008060808587031215620000b8578384fd5b620000c38562000085565b9350620000d36020860162000085565b9250620000e36040860162000085565b9150620000f36060860162000085565b905092959194509250565b612294806200010e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80633e76bd03116100665780633e76bd03146101295780634d906eca1461013c57806388f77c1e1461015c5780639ecd21181461016f578063e43d1d6d146101945761009e565b8063011a34c8146100a35780631691473c146100b85780631a049bb6146100e157806325511dcc146101015780633013ce2914610114575b600080fd5b6100b66100b1366004611946565b6101a7565b005b6100cb6100c63660046118a8565b610397565b6040516100d89190611e1e565b60405180910390f35b6100f46100ef3660046118e7565b610651565b6040516100d891906120eb565b6100b661010f3660046119df565b61068a565b61011c6108b5565b6040516100d89190611c8c565b6100f46101373660046118e7565b6108c4565b61014f61014a366004611946565b6108e7565b6040516100d89190612069565b6100b661016a366004611971565b610bcc565b61018261017d36600461191b565b611281565b6040516100d896959493929190612090565b6100b66101a2366004611ab7565b6113fe565b600254604051630bb4137160e31b81526001600160a01b0390911690635da09b88906101d7903390600401611c8c565b60206040518083038186803b1580156101ef57600080fd5b505afa158015610203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022791906119bf565b61024c5760405162461bcd60e51b815260040161024390612024565b60405180910390fd5b6001600160a01b03821633146102745760405162461bcd60e51b815260040161024390611ff7565b6001600160a01b03821660009081526020819052604090205463ffffffff8216106102b15760405162461bcd60e51b815260040161024390611f16565b6001600160a01b0382166000908152602081905260408120805463ffffffff84169081106102ef57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020190508060050160049054906101000a900460ff161561032e5760405162461bcd60e51b815260040161024390611ea8565b60058101805464ff00000000191664010000000017905580546040516001600160a01b038516917fa9beb27e830003560c2398fa532cf95de9d403aee055110b1f61fcb80a05d13c9161038a916001600160801b03169061207c565b60405180910390a2505050565b6001600160a01b038116600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b828210156106455760008481526020908190206040805160e081019091526006850290910180546001600160801b031682526001810180549293919291840191610416906121e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610442906121e2565b801561048f5780601f106104645761010080835404028352916020019161048f565b820191906000526020600020905b81548152906001019060200180831161047257829003601f168201915b505050505081526020016002820180546104a8906121e2565b80601f01602080910402602001604051908101604052809291908181526020018280546104d4906121e2565b80156105215780601f106104f657610100808354040283529160200191610521565b820191906000526020600020905b81548152906001019060200180831161050457829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156105fb57838290600052602060002001805461056e906121e2565b80601f016020809104026020016040519081016040528092919081815260200182805461059a906121e2565b80156105e75780601f106105bc576101008083540402835291602001916105e7565b820191906000526020600020905b8154815290600101906020018083116105ca57829003601f168201915b50505050508152602001906001019061054f565b50505090825250600482015460208083019190915260059092015463ffffffff81166040830152640100000000900460ff16151560609091015290825260019290920191016103cd565b5050505090505b919050565b6001600160a01b03821660009081526001602090815260408083206001600160801b038516845290915290205463ffffffff1692915050565b600254604051630bb4137160e31b81526001600160a01b0390911690635da09b88906106ba903390600401611c8c565b60206040518083038186803b1580156106d257600080fd5b505afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a91906119bf565b6107265760405162461bcd60e51b815260040161024390612024565b33600090815260208181526040808320815160e0810183526001600160801b038c811682528185018c81529382018b9052606082018a90526080820189905263ffffffff871660a083015260c0820186905282546001808201855593875295859020825160069097020180546fffffffffffffffffffffffffffffffff191696909116959095178555915180519294936107c693928501929101906115fb565b50604082015180516107e29160028401916020909101906115fb565b50606082015180516107fe91600384019160209091019061167f565b506080820151600482015560a08201516005909101805460c09093015115156401000000000264ff000000001963ffffffff93841663ffffffff1995861617161790553360008181526001602090815260408083206001600160801b038e1684529091529081902080549387169390941692909217909255517f25c4b697834ba65ba2ce6878f71f5847731572b6f3773f4fdb5f51c1e9fa2e02906108a4908a9061207c565b60405180910390a250505050505050565b6005546001600160a01b031681565b600160209081526000928352604080842090915290825290205463ffffffff1681565b6108ef6116d8565b6001600160a01b03831660009081526020819052604090205463ffffffff83161061092c5760405162461bcd60e51b815260040161024390611f16565b6001600160a01b0383166000908152602081905260409020805463ffffffff841690811061096a57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e0810190915260069092020180546001600160801b0316825260018101805492939192918401916109aa906121e2565b80601f01602080910402602001604051908101604052809291908181526020018280546109d6906121e2565b8015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b50505050508152602001600282018054610a3c906121e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a68906121e2565b8015610ab55780601f10610a8a57610100808354040283529160200191610ab5565b820191906000526020600020905b815481529060010190602001808311610a9857829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610b8f578382906000526020600020018054610b02906121e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2e906121e2565b8015610b7b5780601f10610b5057610100808354040283529160200191610b7b565b820191906000526020600020905b815481529060010190602001808311610b5e57829003601f168201915b505050505081526020019060010190610ae3565b505050908252506004820154602082015260059091015463ffffffff81166040830152640100000000900460ff1615156060909101529392505050565b6001600160a01b03831660009081526020819052604090205463ffffffff831610610c095760405162461bcd60e51b815260040161024390611f16565b6001600160a01b0383166000908152602081905260408120805463ffffffff8516908110610c4757634e487b7160e01b600052603260045260246000fd5b6000918252602090912060069091020180549091506001600160801b0316610c815760405162461bcd60e51b815260040161024390611fcc565b6005810154640100000000900460ff1615610cae5760405162461bcd60e51b815260040161024390611f7b565b6001600160a01b038416600090815260016020908152604080832084546001600160801b0316845290915290205463ffffffff1661ffff8316811015610d065760405162461bcd60e51b815260040161024390611e7e565b60008361ffff168360040154610d1c919061215b565b6005840154909150600090610d3c9061ffff87169063ffffffff1661217a565b90506000610d4b60648461213b565b6005546040516370a0823160e01b815291925084916001600160a01b03909116906370a0823190610d80903390600401611c8c565b60206040518083038186803b158015610d9857600080fd5b505afa158015610dac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd09190611a9f565b1015610dee5760405162461bcd60e51b815260040161024390611f4d565b6005546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e2290339030908890600401611d76565b602060405180830381600087803b158015610e3c57600080fd5b505af1158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7491906119bf565b610e905760405162461bcd60e51b815260040161024390611fa4565b6005546001600160a01b031663a9059cbb89610eac84876121a6565b6040518363ffffffff1660e01b8152600401610ec9929190611e05565b602060405180830381600087803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b91906119bf565b610f375760405162461bcd60e51b815260040161024390611fa4565b6001600160a01b038816600090815260016020908152604080832088546001600160801b031684529091528120805461ffff89169290610f7e90849063ffffffff166121bd565b825463ffffffff9182166101009390930a9283029190920219909116179055506003546040516001621e13ed60e01b031981526001600160a01b039091169063ffe1ec1390610fd5908b9033908790600401611d9a565b600060405180830381600087803b158015610fef57600080fd5b505af1158015611003573d6000803e3d6000fd5b505060035460405163c449706b60e01b81526001600160a01b03909116925063c449706b9150611037908b90600401611c8c565b600060405180830381600087803b15801561105157600080fd5b505af1158015611065573d6000803e3d6000fd5b5050600554600354604051631fd9afa560e01b81526001600160a01b03928316945063095ea7b39350911690631fd9afa5906110a5908d90600401611c8c565b60206040518083038186803b1580156110bd57600080fd5b505afa1580156110d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f591906118cb565b836040518363ffffffff1660e01b8152600401611113929190611e05565b602060405180830381600087803b15801561112d57600080fd5b505af1158015611141573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116591906119bf565b506003546040516359cc2bcd60e11b81526001600160a01b039091169063b398579a9061119a908b9030908690600401611d76565b600060405180830381600087803b1580156111b457600080fd5b505af11580156111c8573d6000803e3d6000fd5b50506004805460405163cee3087360e01b81526001600160a01b03909116935063cee3087392506112059133918d918d918d918b918b9101611dc3565b600060405180830381600087803b15801561121f57600080fd5b505af1158015611233573d6000803e3d6000fd5b505050507fef9caa1a3ee85aef0b5cdb236d405b3370bb9f171e6a0fec87b618df025cb4b43389876002018960405161126f9493929190611ca0565b60405180910390a15050505050505050565b6000602052816000526040600020818154811061129d57600080fd5b6000918252602090912060069091020180546001820180546001600160801b0390921694509192506112ce906121e2565b80601f01602080910402602001604051908101604052809291908181526020018280546112fa906121e2565b80156113475780601f1061131c57610100808354040283529160200191611347565b820191906000526020600020905b81548152906001019060200180831161132a57829003601f168201915b50505050509080600201805461135c906121e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611388906121e2565b80156113d55780601f106113aa576101008083540402835291602001916113d5565b820191906000526020600020905b8154815290600101906020018083116113b857829003601f168201915b50505050600483015460059093015491929163ffffffff81169150640100000000900460ff1686565b600254604051630bb4137160e31b81526001600160a01b0390911690635da09b889061142e903390600401611c8c565b60206040518083038186803b15801561144657600080fd5b505afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e91906119bf565b61149a5760405162461bcd60e51b815260040161024390612024565b3360009081526020819052604090205463ffffffff8716106114ce5760405162461bcd60e51b815260040161024390611f16565b336000908152602081905260408120805463ffffffff891690811061150357634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020190508060050160049054906101000a900460ff16156115425760405162461bcd60e51b815260040161024390611edf565b855161155790600283019060208901906115fb565b50845161156d906003830190602088019061167f565b506004810184905560058101805463ffffffff80851663ffffffff199283161790925533600081815260016020908152604080832087546001600160801b039081168552925291829020805495891695909416949094179092558354915190927f8131ddc78581bf58e6b6b14d9aa1aacc7d24fab341c623ccce883911498620c0926108a49291169061207c565b828054611607906121e2565b90600052602060002090601f016020900481019282611629576000855561166f565b82601f1061164257805160ff191683800117855561166f565b8280016001018555821561166f579182015b8281111561166f578251825591602001919060010190611654565b5061167b929150611726565b5090565b8280548282559060005260206000209081019282156116cc579160200282015b828111156116cc57825180516116bc9184916020909101906115fb565b509160200191906001019061169f565b5061167b92915061173b565b6040518060e0016040528060006001600160801b0316815260200160608152602001606081526020016060815260200160008152602001600063ffffffff1681526020016000151581525090565b5b8082111561167b5760008155600101611727565b8082111561167b57600061174f8282611758565b5060010161173b565b508054611764906121e2565b6000825580601f106117765750611794565b601f0160209004906000526020600020908101906117949190611726565b50565b600082601f8301126117a7578081fd5b8135602067ffffffffffffffff8211156117c3576117c3612233565b6117d081828402016120fc565b82815281810190858301855b85811015611805576117f3898684358b0101611812565b845292840192908401906001016117dc565b5090979650505050505050565b600082601f830112611822578081fd5b813567ffffffffffffffff81111561183c5761183c612233565b61184f601f8201601f19166020016120fc565b818152846020838601011115611863578283fd5b816020850160208301379081016020019190915292915050565b80356001600160801b038116811461064c57600080fd5b803563ffffffff8116811461064c57600080fd5b6000602082840312156118b9578081fd5b81356118c481612249565b9392505050565b6000602082840312156118dc578081fd5b81516118c481612249565b600080604083850312156118f9578081fd5b823561190481612249565b91506119126020840161187d565b90509250929050565b6000806040838503121561192d578182fd5b823561193881612249565b946020939093013593505050565b60008060408385031215611958578182fd5b823561196381612249565b915061191260208401611894565b600080600060608486031215611985578081fd5b833561199081612249565b925061199e60208501611894565b9150604084013561ffff811681146119b4578182fd5b809150509250925092565b6000602082840312156119d0578081fd5b815180151581146118c4578182fd5b600080600080600080600060e0888a0312156119f9578283fd5b611a028861187d565b9650602088013567ffffffffffffffff80821115611a1e578485fd5b611a2a8b838c01611812565b975060408a0135915080821115611a3f578485fd5b611a4b8b838c01611812565b965060608a0135915080821115611a60578485fd5b50611a6d8a828b01611797565b94505060808801359250611a8360a08901611894565b9150611a9160c08901611894565b905092959891949750929550565b600060208284031215611ab0578081fd5b5051919050565b60008060008060008060c08789031215611acf578182fd5b611ad887611894565b9550602087013567ffffffffffffffff80821115611af4578384fd5b611b008a838b01611812565b96506040890135915080821115611b15578384fd5b50611b2289828a01611797565b94505060608701359250611b3860808801611894565b9150611b4660a08801611894565b90509295509295509295565b15159052565b60008151808452815b81811015611b7d57602081850181015186830182015201611b61565b81811115611b8e5782602083870101525b50601f01601f19169290920160200192915050565b60006001600160801b03825116835260208083015160e082860152611bcb60e0860182611b58565b905060408401518582036040870152611be48282611b58565b915050606084015185820360608701528181518084528484019150848582028501018584019350865b82811015611c3b57601f19868303018452611c29828651611b58565b94870194938701939150600101611c0d565b50608088015160808a015260a08801519550611c5a60a08a0187611c82565b60c08801519550611c6e60c08a0187611b52565b98975050505050505050565b61ffff169052565b63ffffffff169052565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602080830191909152608060408301528354600091829160028104600182811680611cdb57607f831692505b848310811415611cf957634e487b7160e01b87526022600452602487fd5b611d068360808a01612132565b818015611d1a5760018114611d2b57611d55565b60ff19861682528682019750611d55565b611d348c612126565b895b86811015611d4f57815484820152908501908801611d36565b83019850505b5050505050505080915050611d6d6060830184611c7a565b95945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03938416815291909216602082015263ffffffff909116604082015260600190565b6001600160a01b03968716815294909516602085015263ffffffff928316604085015261ffff919091166060840152608083015290911660a082015260c00190565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611e7157603f19888603018452611e5f858351611ba3565b94509285019290850190600101611e43565b5092979650505050505050565b60208082526010908201526f4e6f7420656e6f7567682073746f636b60801b604082015260600190565b60208082526017908201527f50726f6475637420616c72656164792072656d6f766564000000000000000000604082015260600190565b60208082526018908201527f50726f6475637420686173206265656e2072656d6f7665640000000000000000604082015260600190565b6020808252601a908201527f50726f6475637420696e646578206f7574206f662072616e6765000000000000604082015260600190565b602080825260149082015273496e73756666696369656e742062616c616e636560601b604082015260600190565b6020808252600f908201526e141c9bd91d58dd081c995b5bdd9959608a1b604082015260600190565b6020808252600e908201526d14185e5b595b9d0819985a5b195960921b604082015260600190565b602080825260119082015270141c9bd91d58dd081b9bdd08199bdd5b99607a1b604082015260600190565b602080825260139082015272556e617574686f72697a65642061636365737360681b604082015260600190565b60208082526025908201527f4f6e6c792072657461696c6572732063616e2063616c6c20746869732066756e60408201526431ba34b7b760d91b606082015260800190565b6000602082526118c46020830184611ba3565b6001600160801b0391909116815260200190565b60006001600160801b038816825260c060208301526120b260c0830188611b58565b82810360408401526120c48188611b58565b6060840196909652505063ffffffff929092166080830152151560a0909101529392505050565b63ffffffff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561211e5761211e612233565b604052919050565b60009081526020902090565b90815260200190565b60008261215657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156121755761217561221d565b500290565b600063ffffffff8083168185168183048111821515161561219d5761219d61221d565b02949350505050565b6000828210156121b8576121b861221d565b500390565b600063ffffffff838116908316818110156121da576121da61221d565b039392505050565b6002810460018216806121f657607f821691505b6020821081141561221757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461179457600080fdfea2646970667358221220968f5ab30caf167256d70dbe8c963152cc72d9ad42497e4fd01460b211bdd0a664736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80633e76bd03116100665780633e76bd03146101295780634d906eca1461013c57806388f77c1e1461015c5780639ecd21181461016f578063e43d1d6d146101945761009e565b8063011a34c8146100a35780631691473c146100b85780631a049bb6146100e157806325511dcc146101015780633013ce2914610114575b600080fd5b6100b66100b1366004611946565b6101a7565b005b6100cb6100c63660046118a8565b610397565b6040516100d89190611e1e565b60405180910390f35b6100f46100ef3660046118e7565b610651565b6040516100d891906120eb565b6100b661010f3660046119df565b61068a565b61011c6108b5565b6040516100d89190611c8c565b6100f46101373660046118e7565b6108c4565b61014f61014a366004611946565b6108e7565b6040516100d89190612069565b6100b661016a366004611971565b610bcc565b61018261017d36600461191b565b611281565b6040516100d896959493929190612090565b6100b66101a2366004611ab7565b6113fe565b600254604051630bb4137160e31b81526001600160a01b0390911690635da09b88906101d7903390600401611c8c565b60206040518083038186803b1580156101ef57600080fd5b505afa158015610203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022791906119bf565b61024c5760405162461bcd60e51b815260040161024390612024565b60405180910390fd5b6001600160a01b03821633146102745760405162461bcd60e51b815260040161024390611ff7565b6001600160a01b03821660009081526020819052604090205463ffffffff8216106102b15760405162461bcd60e51b815260040161024390611f16565b6001600160a01b0382166000908152602081905260408120805463ffffffff84169081106102ef57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020190508060050160049054906101000a900460ff161561032e5760405162461bcd60e51b815260040161024390611ea8565b60058101805464ff00000000191664010000000017905580546040516001600160a01b038516917fa9beb27e830003560c2398fa532cf95de9d403aee055110b1f61fcb80a05d13c9161038a916001600160801b03169061207c565b60405180910390a2505050565b6001600160a01b038116600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b828210156106455760008481526020908190206040805160e081019091526006850290910180546001600160801b031682526001810180549293919291840191610416906121e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610442906121e2565b801561048f5780601f106104645761010080835404028352916020019161048f565b820191906000526020600020905b81548152906001019060200180831161047257829003601f168201915b505050505081526020016002820180546104a8906121e2565b80601f01602080910402602001604051908101604052809291908181526020018280546104d4906121e2565b80156105215780601f106104f657610100808354040283529160200191610521565b820191906000526020600020905b81548152906001019060200180831161050457829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156105fb57838290600052602060002001805461056e906121e2565b80601f016020809104026020016040519081016040528092919081815260200182805461059a906121e2565b80156105e75780601f106105bc576101008083540402835291602001916105e7565b820191906000526020600020905b8154815290600101906020018083116105ca57829003601f168201915b50505050508152602001906001019061054f565b50505090825250600482015460208083019190915260059092015463ffffffff81166040830152640100000000900460ff16151560609091015290825260019290920191016103cd565b5050505090505b919050565b6001600160a01b03821660009081526001602090815260408083206001600160801b038516845290915290205463ffffffff1692915050565b600254604051630bb4137160e31b81526001600160a01b0390911690635da09b88906106ba903390600401611c8c565b60206040518083038186803b1580156106d257600080fd5b505afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a91906119bf565b6107265760405162461bcd60e51b815260040161024390612024565b33600090815260208181526040808320815160e0810183526001600160801b038c811682528185018c81529382018b9052606082018a90526080820189905263ffffffff871660a083015260c0820186905282546001808201855593875295859020825160069097020180546fffffffffffffffffffffffffffffffff191696909116959095178555915180519294936107c693928501929101906115fb565b50604082015180516107e29160028401916020909101906115fb565b50606082015180516107fe91600384019160209091019061167f565b506080820151600482015560a08201516005909101805460c09093015115156401000000000264ff000000001963ffffffff93841663ffffffff1995861617161790553360008181526001602090815260408083206001600160801b038e1684529091529081902080549387169390941692909217909255517f25c4b697834ba65ba2ce6878f71f5847731572b6f3773f4fdb5f51c1e9fa2e02906108a4908a9061207c565b60405180910390a250505050505050565b6005546001600160a01b031681565b600160209081526000928352604080842090915290825290205463ffffffff1681565b6108ef6116d8565b6001600160a01b03831660009081526020819052604090205463ffffffff83161061092c5760405162461bcd60e51b815260040161024390611f16565b6001600160a01b0383166000908152602081905260409020805463ffffffff841690811061096a57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e0810190915260069092020180546001600160801b0316825260018101805492939192918401916109aa906121e2565b80601f01602080910402602001604051908101604052809291908181526020018280546109d6906121e2565b8015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b50505050508152602001600282018054610a3c906121e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a68906121e2565b8015610ab55780601f10610a8a57610100808354040283529160200191610ab5565b820191906000526020600020905b815481529060010190602001808311610a9857829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610b8f578382906000526020600020018054610b02906121e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2e906121e2565b8015610b7b5780601f10610b5057610100808354040283529160200191610b7b565b820191906000526020600020905b815481529060010190602001808311610b5e57829003601f168201915b505050505081526020019060010190610ae3565b505050908252506004820154602082015260059091015463ffffffff81166040830152640100000000900460ff1615156060909101529392505050565b6001600160a01b03831660009081526020819052604090205463ffffffff831610610c095760405162461bcd60e51b815260040161024390611f16565b6001600160a01b0383166000908152602081905260408120805463ffffffff8516908110610c4757634e487b7160e01b600052603260045260246000fd5b6000918252602090912060069091020180549091506001600160801b0316610c815760405162461bcd60e51b815260040161024390611fcc565b6005810154640100000000900460ff1615610cae5760405162461bcd60e51b815260040161024390611f7b565b6001600160a01b038416600090815260016020908152604080832084546001600160801b0316845290915290205463ffffffff1661ffff8316811015610d065760405162461bcd60e51b815260040161024390611e7e565b60008361ffff168360040154610d1c919061215b565b6005840154909150600090610d3c9061ffff87169063ffffffff1661217a565b90506000610d4b60648461213b565b6005546040516370a0823160e01b815291925084916001600160a01b03909116906370a0823190610d80903390600401611c8c565b60206040518083038186803b158015610d9857600080fd5b505afa158015610dac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd09190611a9f565b1015610dee5760405162461bcd60e51b815260040161024390611f4d565b6005546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e2290339030908890600401611d76565b602060405180830381600087803b158015610e3c57600080fd5b505af1158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7491906119bf565b610e905760405162461bcd60e51b815260040161024390611fa4565b6005546001600160a01b031663a9059cbb89610eac84876121a6565b6040518363ffffffff1660e01b8152600401610ec9929190611e05565b602060405180830381600087803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b91906119bf565b610f375760405162461bcd60e51b815260040161024390611fa4565b6001600160a01b038816600090815260016020908152604080832088546001600160801b031684529091528120805461ffff89169290610f7e90849063ffffffff166121bd565b825463ffffffff9182166101009390930a9283029190920219909116179055506003546040516001621e13ed60e01b031981526001600160a01b039091169063ffe1ec1390610fd5908b9033908790600401611d9a565b600060405180830381600087803b158015610fef57600080fd5b505af1158015611003573d6000803e3d6000fd5b505060035460405163c449706b60e01b81526001600160a01b03909116925063c449706b9150611037908b90600401611c8c565b600060405180830381600087803b15801561105157600080fd5b505af1158015611065573d6000803e3d6000fd5b5050600554600354604051631fd9afa560e01b81526001600160a01b03928316945063095ea7b39350911690631fd9afa5906110a5908d90600401611c8c565b60206040518083038186803b1580156110bd57600080fd5b505afa1580156110d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f591906118cb565b836040518363ffffffff1660e01b8152600401611113929190611e05565b602060405180830381600087803b15801561112d57600080fd5b505af1158015611141573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116591906119bf565b506003546040516359cc2bcd60e11b81526001600160a01b039091169063b398579a9061119a908b9030908690600401611d76565b600060405180830381600087803b1580156111b457600080fd5b505af11580156111c8573d6000803e3d6000fd5b50506004805460405163cee3087360e01b81526001600160a01b03909116935063cee3087392506112059133918d918d918d918b918b9101611dc3565b600060405180830381600087803b15801561121f57600080fd5b505af1158015611233573d6000803e3d6000fd5b505050507fef9caa1a3ee85aef0b5cdb236d405b3370bb9f171e6a0fec87b618df025cb4b43389876002018960405161126f9493929190611ca0565b60405180910390a15050505050505050565b6000602052816000526040600020818154811061129d57600080fd5b6000918252602090912060069091020180546001820180546001600160801b0390921694509192506112ce906121e2565b80601f01602080910402602001604051908101604052809291908181526020018280546112fa906121e2565b80156113475780601f1061131c57610100808354040283529160200191611347565b820191906000526020600020905b81548152906001019060200180831161132a57829003601f168201915b50505050509080600201805461135c906121e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611388906121e2565b80156113d55780601f106113aa576101008083540402835291602001916113d5565b820191906000526020600020905b8154815290600101906020018083116113b857829003601f168201915b50505050600483015460059093015491929163ffffffff81169150640100000000900460ff1686565b600254604051630bb4137160e31b81526001600160a01b0390911690635da09b889061142e903390600401611c8c565b60206040518083038186803b15801561144657600080fd5b505afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e91906119bf565b61149a5760405162461bcd60e51b815260040161024390612024565b3360009081526020819052604090205463ffffffff8716106114ce5760405162461bcd60e51b815260040161024390611f16565b336000908152602081905260408120805463ffffffff891690811061150357634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020190508060050160049054906101000a900460ff16156115425760405162461bcd60e51b815260040161024390611edf565b855161155790600283019060208901906115fb565b50845161156d906003830190602088019061167f565b506004810184905560058101805463ffffffff80851663ffffffff199283161790925533600081815260016020908152604080832087546001600160801b039081168552925291829020805495891695909416949094179092558354915190927f8131ddc78581bf58e6b6b14d9aa1aacc7d24fab341c623ccce883911498620c0926108a49291169061207c565b828054611607906121e2565b90600052602060002090601f016020900481019282611629576000855561166f565b82601f1061164257805160ff191683800117855561166f565b8280016001018555821561166f579182015b8281111561166f578251825591602001919060010190611654565b5061167b929150611726565b5090565b8280548282559060005260206000209081019282156116cc579160200282015b828111156116cc57825180516116bc9184916020909101906115fb565b509160200191906001019061169f565b5061167b92915061173b565b6040518060e0016040528060006001600160801b0316815260200160608152602001606081526020016060815260200160008152602001600063ffffffff1681526020016000151581525090565b5b8082111561167b5760008155600101611727565b8082111561167b57600061174f8282611758565b5060010161173b565b508054611764906121e2565b6000825580601f106117765750611794565b601f0160209004906000526020600020908101906117949190611726565b50565b600082601f8301126117a7578081fd5b8135602067ffffffffffffffff8211156117c3576117c3612233565b6117d081828402016120fc565b82815281810190858301855b85811015611805576117f3898684358b0101611812565b845292840192908401906001016117dc565b5090979650505050505050565b600082601f830112611822578081fd5b813567ffffffffffffffff81111561183c5761183c612233565b61184f601f8201601f19166020016120fc565b818152846020838601011115611863578283fd5b816020850160208301379081016020019190915292915050565b80356001600160801b038116811461064c57600080fd5b803563ffffffff8116811461064c57600080fd5b6000602082840312156118b9578081fd5b81356118c481612249565b9392505050565b6000602082840312156118dc578081fd5b81516118c481612249565b600080604083850312156118f9578081fd5b823561190481612249565b91506119126020840161187d565b90509250929050565b6000806040838503121561192d578182fd5b823561193881612249565b946020939093013593505050565b60008060408385031215611958578182fd5b823561196381612249565b915061191260208401611894565b600080600060608486031215611985578081fd5b833561199081612249565b925061199e60208501611894565b9150604084013561ffff811681146119b4578182fd5b809150509250925092565b6000602082840312156119d0578081fd5b815180151581146118c4578182fd5b600080600080600080600060e0888a0312156119f9578283fd5b611a028861187d565b9650602088013567ffffffffffffffff80821115611a1e578485fd5b611a2a8b838c01611812565b975060408a0135915080821115611a3f578485fd5b611a4b8b838c01611812565b965060608a0135915080821115611a60578485fd5b50611a6d8a828b01611797565b94505060808801359250611a8360a08901611894565b9150611a9160c08901611894565b905092959891949750929550565b600060208284031215611ab0578081fd5b5051919050565b60008060008060008060c08789031215611acf578182fd5b611ad887611894565b9550602087013567ffffffffffffffff80821115611af4578384fd5b611b008a838b01611812565b96506040890135915080821115611b15578384fd5b50611b2289828a01611797565b94505060608701359250611b3860808801611894565b9150611b4660a08801611894565b90509295509295509295565b15159052565b60008151808452815b81811015611b7d57602081850181015186830182015201611b61565b81811115611b8e5782602083870101525b50601f01601f19169290920160200192915050565b60006001600160801b03825116835260208083015160e082860152611bcb60e0860182611b58565b905060408401518582036040870152611be48282611b58565b915050606084015185820360608701528181518084528484019150848582028501018584019350865b82811015611c3b57601f19868303018452611c29828651611b58565b94870194938701939150600101611c0d565b50608088015160808a015260a08801519550611c5a60a08a0187611c82565b60c08801519550611c6e60c08a0187611b52565b98975050505050505050565b61ffff169052565b63ffffffff169052565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602080830191909152608060408301528354600091829160028104600182811680611cdb57607f831692505b848310811415611cf957634e487b7160e01b87526022600452602487fd5b611d068360808a01612132565b818015611d1a5760018114611d2b57611d55565b60ff19861682528682019750611d55565b611d348c612126565b895b86811015611d4f57815484820152908501908801611d36565b83019850505b5050505050505080915050611d6d6060830184611c7a565b95945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03938416815291909216602082015263ffffffff909116604082015260600190565b6001600160a01b03968716815294909516602085015263ffffffff928316604085015261ffff919091166060840152608083015290911660a082015260c00190565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611e7157603f19888603018452611e5f858351611ba3565b94509285019290850190600101611e43565b5092979650505050505050565b60208082526010908201526f4e6f7420656e6f7567682073746f636b60801b604082015260600190565b60208082526017908201527f50726f6475637420616c72656164792072656d6f766564000000000000000000604082015260600190565b60208082526018908201527f50726f6475637420686173206265656e2072656d6f7665640000000000000000604082015260600190565b6020808252601a908201527f50726f6475637420696e646578206f7574206f662072616e6765000000000000604082015260600190565b602080825260149082015273496e73756666696369656e742062616c616e636560601b604082015260600190565b6020808252600f908201526e141c9bd91d58dd081c995b5bdd9959608a1b604082015260600190565b6020808252600e908201526d14185e5b595b9d0819985a5b195960921b604082015260600190565b602080825260119082015270141c9bd91d58dd081b9bdd08199bdd5b99607a1b604082015260600190565b602080825260139082015272556e617574686f72697a65642061636365737360681b604082015260600190565b60208082526025908201527f4f6e6c792072657461696c6572732063616e2063616c6c20746869732066756e60408201526431ba34b7b760d91b606082015260800190565b6000602082526118c46020830184611ba3565b6001600160801b0391909116815260200190565b60006001600160801b038816825260c060208301526120b260c0830188611b58565b82810360408401526120c48188611b58565b6060840196909652505063ffffffff929092166080830152151560a0909101529392505050565b63ffffffff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561211e5761211e612233565b604052919050565b60009081526020902090565b90815260200190565b60008261215657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156121755761217561221d565b500290565b600063ffffffff8083168185168183048111821515161561219d5761219d61221d565b02949350505050565b6000828210156121b8576121b861221d565b500390565b600063ffffffff838116908316818110156121da576121da61221d565b039392505050565b6002810460018216806121f657607f821691505b6020821081141561221757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461179457600080fdfea2646970667358221220968f5ab30caf167256d70dbe8c963152cc72d9ad42497e4fd01460b211bdd0a664736f6c63430008000033",
  "devdoc": {
    "details": "This contract handles operations related to product management in a decentralized retail setup, including adding new products, updating existing ones, and processing purchases.",
    "kind": "dev",
    "methods": {
      "addProduct(uint128,string,string,string[],uint256,uint32,uint32)": {
        "details": "Adds a product to the retailer's inventory and initializes its stock. Emits the ProductAdded event.",
        "params": {
          "ipfsHash": "IPFS hash containing product information",
          "name": "Product name",
          "price": "Price of the product in smallest token units",
          "productCode": "Unique code for the product",
          "score": "Loyalty score awarded for purchasing this product",
          "stock": "Initial stock quantity",
          "tags": "Array of tags for categorization"
        }
      },
      "buyProduct(address,uint32,uint16)": {
        "details": "Processes the purchase of a product, handles payment transfer, updates stock, and registers the transaction. Emits the ProductBought event and interacts with LoyaltyRewards and TransactionManager.",
        "params": {
          "index": "Index of the product to buy",
          "quantity": "Quantity of the product to buy",
          "retailerAddress": "Address of the retailer"
        }
      },
      "getProduct(address,uint32)": {
        "params": {
          "index": "Index of the product",
          "retailerAddress": "Address of the retailer"
        },
        "returns": {
          "_0": "Single product details"
        }
      },
      "getProductStock(address,uint128)": {
        "params": {
          "productCode": "Code of the product",
          "retailerAddress": "Address of the retailer"
        },
        "returns": {
          "_0": "Stock quantity"
        }
      },
      "getProducts(address)": {
        "params": {
          "retailerAddress": "Address of the retailer"
        },
        "returns": {
          "_0": "Array of products"
        }
      },
      "removeProduct(address,uint32)": {
        "details": "Marks a product as removed in the retailer's inventory. Emits the ProductRemoved event.",
        "params": {
          "index": "Index of the product to remove",
          "retailerAddress": "Address of the retailer"
        }
      },
      "updateProduct(uint32,string,string[],uint256,uint32,uint32)": {
        "details": "Updates a product in the retailer's inventory and adjusts its stock. Emits the ProductUpdated event.",
        "params": {
          "index": "Index of the product in the retailer's product array",
          "name": "New name for the product",
          "price": "New price for the product",
          "score": "Updated loyalty score for the product",
          "stock": "Updated stock quantity",
          "tags": "New tags for the product"
        }
      }
    },
    "title": "Inventory Management for Retailer's Products",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addProduct(uint128,string,string,string[],uint256,uint32,uint32)": {
        "notice": "Adds a new product to the retailer's inventory"
      },
      "buyProduct(address,uint32,uint16)": {
        "notice": "Facilitates the purchase of a product from a retailer's inventory"
      },
      "getProduct(address,uint32)": {
        "notice": "Retrieves a specific product of a retailer"
      },
      "getProductStock(address,uint128)": {
        "notice": "Retrieves the stock of a specific product"
      },
      "getProducts(address)": {
        "notice": "Retrieves all products of a specific retailer"
      },
      "removeProduct(address,uint32)": {
        "notice": "Removes a product from the retailer's inventory"
      },
      "updateProduct(uint32,string,string[],uint256,uint32,uint32)": {
        "notice": "Updates existing product details"
      }
    },
    "notice": "Manages adding, updating, and buying products in a decentralized store environment",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28,
        "contract": "contracts/InventoryManagement.sol:InventoryManagement",
        "label": "retailerProducts",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_struct(Product)21_storage)dyn_storage)"
      },
      {
        "astId": 34,
        "contract": "contracts/InventoryManagement.sol:InventoryManagement",
        "label": "productStock",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint128,t_uint32))"
      },
      {
        "astId": 37,
        "contract": "contracts/InventoryManagement.sol:InventoryManagement",
        "label": "userManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(UserManager)2222"
      },
      {
        "astId": 40,
        "contract": "contracts/InventoryManagement.sol:InventoryManagement",
        "label": "loyaltyRewards",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(LoyaltyRewards)1024"
      },
      {
        "astId": 43,
        "contract": "contracts/InventoryManagement.sol:InventoryManagement",
        "label": "transactionManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(TransactionManager)1801"
      },
      {
        "astId": 46,
        "contract": "contracts/InventoryManagement.sol:InventoryManagement",
        "label": "paymentToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)1191"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Product)21_storage)dyn_storage": {
        "base": "t_struct(Product)21_storage",
        "encoding": "dynamic_array",
        "label": "struct Product[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1191": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(LoyaltyRewards)1024": {
        "encoding": "inplace",
        "label": "contract LoyaltyRewards",
        "numberOfBytes": "20"
      },
      "t_contract(TransactionManager)1801": {
        "encoding": "inplace",
        "label": "contract TransactionManager",
        "numberOfBytes": "20"
      },
      "t_contract(UserManager)2222": {
        "encoding": "inplace",
        "label": "contract UserManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Product)21_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Product[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Product)21_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint128,t_uint32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint128 => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint128,t_uint32)"
      },
      "t_mapping(t_uint128,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Product)21_storage": {
        "encoding": "inplace",
        "label": "struct Product",
        "members": [
          {
            "astId": 7,
            "contract": "contracts/InventoryManagement.sol:InventoryManagement",
            "label": "code",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 9,
            "contract": "contracts/InventoryManagement.sol:InventoryManagement",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 11,
            "contract": "contracts/InventoryManagement.sol:InventoryManagement",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 14,
            "contract": "contracts/InventoryManagement.sol:InventoryManagement",
            "label": "tags",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 16,
            "contract": "contracts/InventoryManagement.sol:InventoryManagement",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18,
            "contract": "contracts/InventoryManagement.sol:InventoryManagement",
            "label": "score",
            "offset": 0,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 20,
            "contract": "contracts/InventoryManagement.sol:InventoryManagement",
            "label": "removed",
            "offset": 4,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}